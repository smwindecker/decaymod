// Generated by rstantools.  Do not edit by hand.

/*
    decaymod is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    decaymod is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with decaymod.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_w_noCV_noRE_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_w_noCV_noRE");
    reader.add_event(1, 1, "include", "/functions/weibull_functions.stan");
    reader.add_event(1, 0, "start", "/functions/weibull_functions.stan");
    reader.add_event(159, 158, "end", "/functions/weibull_functions.stan");
    reader.add_event(159, 2, "restart", "model_w_noCV_noRE");
    reader.add_event(159, 2, "include", "/functions/param_functions.stan");
    reader.add_event(159, 0, "start", "/functions/param_functions.stan");
    reader.add_event(238, 79, "end", "/functions/param_functions.stan");
    reader.add_event(238, 3, "restart", "model_w_noCV_noRE");
    reader.add_event(289, 52, "end", "model_w_noCV_noRE");
    return reader;
}
template <typename T1__, typename T2__, typename T3__, typename T4__, typename T6__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T6__>::type>::type, Eigen::Dynamic, 1>
weibull(const int& N,
            const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0,
            const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time,
            const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& beta,
            const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& alpha,
            const std::vector<int>& sp,
            const T6__& sigma_obs, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T6__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 16;
        validate_non_negative_index("mu", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(N);
        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu, DUMMY_VAR__);
        current_statement_begin__ = 18;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 19;
            stan::model::assign(mu, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (get_base1(m0, i, "m0", 1) - pow((get_base1(time, i, "time", 1) / get_base1(beta, get_base1(sp, i, "sp", 1), "beta", 1)), get_base1(alpha, get_base1(sp, i, "sp", 1), "alpha", 1))), 
                        "assigning variable mu");
        }
        current_statement_begin__ = 22;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mu);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, typename T6__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T6__>::type>::type, Eigen::Dynamic, 1>
    operator()(const int& N,
            const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0,
            const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time,
            const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& beta,
            const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& alpha,
            const std::vector<int>& sp,
            const T6__& sigma_obs, std::ostream* pstream__) const {
        return weibull(N, m0, time, beta, alpha, sp, sigma_obs, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, typename T4__, typename T6__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T6__>::type>::type, Eigen::Dynamic, 1>
weibull_fit_rng(const int& N,
                    const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0,
                    const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time,
                    const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& beta_fit,
                    const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& alpha_fit,
                    const std::vector<int>& sp,
                    const T6__& sigma_obs, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T6__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 39;
        validate_non_negative_index("mT_fit", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mT_fit(N);
        stan::math::initialize(mT_fit, DUMMY_VAR__);
        stan::math::fill(mT_fit, DUMMY_VAR__);
        current_statement_begin__ = 41;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 42;
            stan::model::assign(mT_fit, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        normal_rng((get_base1(m0, i, "m0", 1) - pow((get_base1(time, i, "time", 1) / get_base1(beta_fit, get_base1(sp, i, "sp", 1), "beta_fit", 1)), get_base1(alpha_fit, get_base1(sp, i, "sp", 1), "alpha_fit", 1))), sigma_obs, base_rng__), 
                        "assigning variable mT_fit");
        }
        current_statement_begin__ = 45;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mT_fit);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_fit_rng_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, typename T6__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T6__>::type>::type, Eigen::Dynamic, 1>
    operator()(const int& N,
                    const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0,
                    const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time,
                    const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& beta_fit,
                    const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& alpha_fit,
                    const std::vector<int>& sp,
                    const T6__& sigma_obs, RNG& base_rng__, std::ostream* pstream__) const {
        return weibull_fit_rng(N, m0, time, beta_fit, alpha_fit, sp, sigma_obs, base_rng__, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, typename T4__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, 1>
weibull_sim_rng(const int& N_sim,
                    const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0_sim,
                    const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time_sim,
                    const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& beta_fit,
                    const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& alpha_fit,
                    const std::vector<int>& sp_sim, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 61;
        validate_non_negative_index("mT_sim", "N_sim", N_sim);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mT_sim(N_sim);
        stan::math::initialize(mT_sim, DUMMY_VAR__);
        stan::math::fill(mT_sim, DUMMY_VAR__);
        current_statement_begin__ = 63;
        for (int i = 1; i <= N_sim; ++i) {
            current_statement_begin__ = 64;
            stan::model::assign(mT_sim, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (get_base1(m0_sim, i, "m0_sim", 1) - pow((get_base1(time_sim, i, "time_sim", 1) / get_base1(beta_fit, get_base1(sp_sim, i, "sp_sim", 1), "beta_fit", 1)), get_base1(alpha_fit, get_base1(sp_sim, i, "sp_sim", 1), "alpha_fit", 1))), 
                        "assigning variable mT_sim");
        }
        current_statement_begin__ = 67;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mT_sim);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_sim_rng_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, 1>
    operator()(const int& N_sim,
                    const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0_sim,
                    const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time_sim,
                    const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& beta_fit,
                    const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& alpha_fit,
                    const std::vector<int>& sp_sim, RNG& base_rng__, std::ostream* pstream__) const {
        return weibull_sim_rng(N_sim, m0_sim, time_sim, beta_fit, alpha_fit, sp_sim, base_rng__, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic, 1>
weibull_pred_rng(const int& N_test,
                     const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0_test,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time_test,
                     const T3__& beta_pred,
                     const T4__& alpha_pred,
                     const T5__& sigma_obs, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 83;
        validate_non_negative_index("mT_pred", "N_test", N_test);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mT_pred(N_test);
        stan::math::initialize(mT_pred, DUMMY_VAR__);
        stan::math::fill(mT_pred, DUMMY_VAR__);
        current_statement_begin__ = 85;
        for (int i = 1; i <= N_test; ++i) {
            current_statement_begin__ = 86;
            stan::model::assign(mT_pred, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        normal_rng((get_base1(m0_test, i, "m0_test", 1) - pow((get_base1(time_test, i, "time_test", 1) / beta_pred), alpha_pred)), sigma_obs, base_rng__), 
                        "assigning variable mT_pred");
        }
        current_statement_begin__ = 89;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mT_pred);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_pred_rng_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic, 1>
    operator()(const int& N_test,
                     const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0_test,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time_test,
                     const T3__& beta_pred,
                     const T4__& alpha_pred,
                     const T5__& sigma_obs, RNG& base_rng__, std::ostream* pstream__) const {
        return weibull_pred_rng(N_test, m0_test, time_test, beta_pred, alpha_pred, sigma_obs, base_rng__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
weibull_negloglik(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& mT_test,
                      const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0_test,
                      const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time_test,
                      const T3__& beta_pred,
                      const T4__& alpha_pred,
                      const T5__& sigma_obs,
                      const int& N_test, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 106;
        validate_non_negative_index("loglik", "N_test", N_test);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> loglik(N_test);
        stan::math::initialize(loglik, DUMMY_VAR__);
        stan::math::fill(loglik, DUMMY_VAR__);
        current_statement_begin__ = 107;
        local_scalar_t__ neg_loglik(DUMMY_VAR__);
        (void) neg_loglik;  // dummy to suppress unused var warning
        stan::math::initialize(neg_loglik, DUMMY_VAR__);
        stan::math::fill(neg_loglik, DUMMY_VAR__);
        current_statement_begin__ = 109;
        for (int i = 1; i <= N_test; ++i) {
            current_statement_begin__ = 110;
            stan::model::assign(loglik, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        normal_log(get_base1(mT_test, i, "mT_test", 1), (get_base1(m0_test, i, "m0_test", 1) - pow((get_base1(time_test, i, "time_test", 1) / beta_pred), alpha_pred)), sigma_obs), 
                        "assigning variable loglik");
        }
        current_statement_begin__ = 113;
        stan::math::assign(neg_loglik, (-(1) * sum(loglik)));
        current_statement_begin__ = 114;
        return stan::math::promote_scalar<fun_return_scalar_t__>(neg_loglik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_negloglik_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& mT_test,
                      const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0_test,
                      const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time_test,
                      const T3__& beta_pred,
                      const T4__& alpha_pred,
                      const T5__& sigma_obs,
                      const int& N_test, std::ostream* pstream__) const {
        return weibull_negloglik(mT_test, m0_test, time_test, beta_pred, alpha_pred, sigma_obs, N_test, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, typename T4__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, 1>
weibull_best_sim_rng(const int& N_sim,
                         const T1__& m0_sim,
                         const T2__& time_sim,
                         const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& beta_fit,
                         const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& alpha_fit,
                         const std::vector<int>& sp_sim, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 130;
        validate_non_negative_index("mT_sim", "N_sim", N_sim);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mT_sim(N_sim);
        stan::math::initialize(mT_sim, DUMMY_VAR__);
        stan::math::fill(mT_sim, DUMMY_VAR__);
        current_statement_begin__ = 132;
        for (int i = 1; i <= N_sim; ++i) {
            current_statement_begin__ = 133;
            stan::model::assign(mT_sim, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (m0_sim - pow((time_sim / get_base1(beta_fit, get_base1(sp_sim, i, "sp_sim", 1), "beta_fit", 1)), get_base1(alpha_fit, get_base1(sp_sim, i, "sp_sim", 1), "alpha_fit", 1))), 
                        "assigning variable mT_sim");
        }
        current_statement_begin__ = 136;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mT_sim);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_best_sim_rng_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, 1>
    operator()(const int& N_sim,
                         const T1__& m0_sim,
                         const T2__& time_sim,
                         const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& beta_fit,
                         const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& alpha_fit,
                         const std::vector<int>& sp_sim, RNG& base_rng__, std::ostream* pstream__) const {
        return weibull_best_sim_rng(N_sim, m0_sim, time_sim, beta_fit, alpha_fit, sp_sim, base_rng__, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, typename T4__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, 1>
weibull_sim_traits_rng(const int& N_sim,
                           const T1__& m0_sim,
                           const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time_sim,
                           const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& beta_fit,
                           const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& alpha_fit,
                           const std::vector<int>& sp_sim, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 152;
        validate_non_negative_index("mT_sim", "N_sim", N_sim);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mT_sim(N_sim);
        stan::math::initialize(mT_sim, DUMMY_VAR__);
        stan::math::fill(mT_sim, DUMMY_VAR__);
        current_statement_begin__ = 154;
        for (int i = 1; i <= N_sim; ++i) {
            current_statement_begin__ = 155;
            stan::model::assign(mT_sim, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (m0_sim - pow((get_base1(time_sim, i, "time_sim", 1) / get_base1(beta_fit, get_base1(sp_sim, i, "sp_sim", 1), "beta_fit", 1)), get_base1(alpha_fit, get_base1(sp_sim, i, "sp_sim", 1), "alpha_fit", 1))), 
                        "assigning variable mT_sim");
        }
        current_statement_begin__ = 158;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mT_sim);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_sim_traits_rng_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, 1>
    operator()(const int& N_sim,
                           const T1__& m0_sim,
                           const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time_sim,
                           const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& beta_fit,
                           const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& alpha_fit,
                           const std::vector<int>& sp_sim, RNG& base_rng__, std::ostream* pstream__) const {
        return weibull_sim_traits_rng(N_sim, m0_sim, time_sim, beta_fit, alpha_fit, sp_sim, base_rng__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T4__>::type, Eigen::Dynamic, 1>
param_re(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& b,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& X,
             const int& P,
             const int& J,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 172;
        validate_non_negative_index("param_ln", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> param_ln(J);
        stan::math::initialize(param_ln, DUMMY_VAR__);
        stan::math::fill(param_ln, DUMMY_VAR__);
        current_statement_begin__ = 173;
        validate_non_negative_index("param_vector", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> param_vector(J);
        stan::math::initialize(param_vector, DUMMY_VAR__);
        stan::math::fill(param_vector, DUMMY_VAR__);
        current_statement_begin__ = 175;
        for (int j = 1; j <= J; ++j) {
            current_statement_begin__ = 177;
            stan::model::assign(param_ln, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        get_base1(a, j, "a", 1), 
                        "assigning variable param_ln");
            current_statement_begin__ = 179;
            for (int p = 1; p <= P; ++p) {
                current_statement_begin__ = 180;
                stan::model::assign(param_ln, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(param_ln, j, "param_ln", 1) + (get_base1(b, p, "b", 1) * get_base1(X, j, p, "X", 1))), 
                            "assigning variable param_ln");
            }
            current_statement_begin__ = 183;
            stan::model::assign(param_vector, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        stan::math::exp(get_base1(param_ln, j, "param_ln", 1)), 
                        "assigning variable param_vector");
        }
        current_statement_begin__ = 186;
        return stan::math::promote_scalar<fun_return_scalar_t__>(param_vector);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct param_re_functor__ {
    template <typename T0__, typename T1__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T4__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& b,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& X,
             const int& P,
             const int& J,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& a, std::ostream* pstream__) const {
        return param_re(b, X, P, J, a, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
param(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& b,
          const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& X,
          const int& P,
          const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 200;
        validate_non_negative_index("param_ln", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> param_ln(J);
        stan::math::initialize(param_ln, DUMMY_VAR__);
        stan::math::fill(param_ln, DUMMY_VAR__);
        current_statement_begin__ = 201;
        validate_non_negative_index("param_vector", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> param_vector(J);
        stan::math::initialize(param_vector, DUMMY_VAR__);
        stan::math::fill(param_vector, DUMMY_VAR__);
        current_statement_begin__ = 203;
        for (int j = 1; j <= J; ++j) {
            current_statement_begin__ = 205;
            stan::model::assign(param_ln, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable param_ln");
            current_statement_begin__ = 207;
            for (int p = 1; p <= P; ++p) {
                current_statement_begin__ = 208;
                stan::model::assign(param_ln, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(param_ln, j, "param_ln", 1) + (get_base1(b, p, "b", 1) * get_base1(X, j, p, "X", 1))), 
                            "assigning variable param_ln");
            }
            current_statement_begin__ = 211;
            stan::model::assign(param_vector, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        stan::math::exp(get_base1(param_ln, j, "param_ln", 1)), 
                        "assigning variable param_vector");
        }
        current_statement_begin__ = 214;
        return stan::math::promote_scalar<fun_return_scalar_t__>(param_vector);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct param_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& b,
          const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& X,
          const int& P,
          const int& J, std::ostream* pstream__) const {
        return param(b, X, P, J, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
param_pred(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& b,
               const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& X,
               const int& P, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 227;
        local_scalar_t__ param_ln(DUMMY_VAR__);
        (void) param_ln;  // dummy to suppress unused var warning
        stan::math::initialize(param_ln, DUMMY_VAR__);
        stan::math::fill(param_ln, DUMMY_VAR__);
        current_statement_begin__ = 228;
        local_scalar_t__ param_value(DUMMY_VAR__);
        (void) param_value;  // dummy to suppress unused var warning
        stan::math::initialize(param_value, DUMMY_VAR__);
        stan::math::fill(param_value, DUMMY_VAR__);
        current_statement_begin__ = 230;
        stan::math::assign(param_ln, 0);
        current_statement_begin__ = 232;
        for (int p = 1; p <= P; ++p) {
            current_statement_begin__ = 233;
            stan::math::assign(param_ln, (param_ln + (get_base1(b, p, "b", 1) * get_base1(X, 1, p, "X", 1))));
        }
        current_statement_begin__ = 236;
        stan::math::assign(param_value, stan::math::exp(param_ln));
        current_statement_begin__ = 237;
        return stan::math::promote_scalar<fun_return_scalar_t__>(param_value);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct param_pred_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& b,
               const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& X,
               const int& P, std::ostream* pstream__) const {
        return param_pred(b, X, P, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_w_noCV_noRE
  : public stan::model::model_base_crtp<model_w_noCV_noRE> {
private:
        int N;
        vector_d mT;
        vector_d m0;
        vector_d time;
        int P_alpha;
        int P_beta;
        int J;
        matrix_d X_alpha;
        matrix_d X_beta;
        std::vector<int> sp;
public:
    model_w_noCV_noRE(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_w_noCV_noRE(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_w_noCV_noRE_namespace::model_w_noCV_noRE";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 242;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 243;
            validate_non_negative_index("mT", "N", N);
            context__.validate_dims("data initialization", "mT", "vector_d", context__.to_vec(N));
            mT = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("mT");
            pos__ = 0;
            size_t mT_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mT_j_1_max__; ++j_1__) {
                mT(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 244;
            validate_non_negative_index("m0", "N", N);
            context__.validate_dims("data initialization", "m0", "vector_d", context__.to_vec(N));
            m0 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("m0");
            pos__ = 0;
            size_t m0_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < m0_j_1_max__; ++j_1__) {
                m0(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 245;
            validate_non_negative_index("time", "N", N);
            context__.validate_dims("data initialization", "time", "vector_d", context__.to_vec(N));
            time = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < time_j_1_max__; ++j_1__) {
                time(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "time", time, 0);
            current_statement_begin__ = 246;
            context__.validate_dims("data initialization", "P_alpha", "int", context__.to_vec());
            P_alpha = int(0);
            vals_i__ = context__.vals_i("P_alpha");
            pos__ = 0;
            P_alpha = vals_i__[pos__++];
            check_greater_or_equal(function__, "P_alpha", P_alpha, 1);
            current_statement_begin__ = 247;
            context__.validate_dims("data initialization", "P_beta", "int", context__.to_vec());
            P_beta = int(0);
            vals_i__ = context__.vals_i("P_beta");
            pos__ = 0;
            P_beta = vals_i__[pos__++];
            check_greater_or_equal(function__, "P_beta", P_beta, 1);
            current_statement_begin__ = 248;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            check_greater_or_equal(function__, "J", J, 1);
            current_statement_begin__ = 249;
            validate_non_negative_index("X_alpha", "J", J);
            validate_non_negative_index("X_alpha", "P_alpha", P_alpha);
            context__.validate_dims("data initialization", "X_alpha", "matrix_d", context__.to_vec(J,P_alpha));
            X_alpha = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(J, P_alpha);
            vals_r__ = context__.vals_r("X_alpha");
            pos__ = 0;
            size_t X_alpha_j_2_max__ = P_alpha;
            size_t X_alpha_j_1_max__ = J;
            for (size_t j_2__ = 0; j_2__ < X_alpha_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_alpha_j_1_max__; ++j_1__) {
                    X_alpha(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 250;
            validate_non_negative_index("X_beta", "J", J);
            validate_non_negative_index("X_beta", "P_beta", P_beta);
            context__.validate_dims("data initialization", "X_beta", "matrix_d", context__.to_vec(J,P_beta));
            X_beta = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(J, P_beta);
            vals_r__ = context__.vals_r("X_beta");
            pos__ = 0;
            size_t X_beta_j_2_max__ = P_beta;
            size_t X_beta_j_1_max__ = J;
            for (size_t j_2__ = 0; j_2__ < X_beta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_beta_j_1_max__; ++j_1__) {
                    X_beta(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 251;
            validate_non_negative_index("sp", "N", N);
            context__.validate_dims("data initialization", "sp", "int", context__.to_vec(N));
            sp = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("sp");
            pos__ = 0;
            size_t sp_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < sp_k_0_max__; ++k_0__) {
                sp[k_0__] = vals_i__[pos__++];
            }
            size_t sp_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < sp_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sp[i_0__]", sp[i_0__], 1);
                check_less_or_equal(function__, "sp[i_0__]", sp[i_0__], J);
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 255;
            validate_non_negative_index("b_alpha", "P_alpha", P_alpha);
            num_params_r__ += P_alpha;
            current_statement_begin__ = 256;
            validate_non_negative_index("b_beta", "P_beta", P_beta);
            num_params_r__ += P_beta;
            current_statement_begin__ = 257;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_w_noCV_noRE() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 255;
        if (!(context__.contains_r("b_alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_alpha");
        pos__ = 0U;
        validate_non_negative_index("b_alpha", "P_alpha", P_alpha);
        context__.validate_dims("parameter initialization", "b_alpha", "vector_d", context__.to_vec(P_alpha));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_alpha(P_alpha);
        size_t b_alpha_j_1_max__ = P_alpha;
        for (size_t j_1__ = 0; j_1__ < b_alpha_j_1_max__; ++j_1__) {
            b_alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b_alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 256;
        if (!(context__.contains_r("b_beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_beta");
        pos__ = 0U;
        validate_non_negative_index("b_beta", "P_beta", P_beta);
        context__.validate_dims("parameter initialization", "b_beta", "vector_d", context__.to_vec(P_beta));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_beta(P_beta);
        size_t b_beta_j_1_max__ = P_beta;
        for (size_t j_1__ = 0; j_1__ < b_beta_j_1_max__; ++j_1__) {
            b_beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b_beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 257;
        if (!(context__.contains_r("sigma_obs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_obs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_obs", "double", context__.to_vec());
        double sigma_obs(0);
        sigma_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_obs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 255;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_alpha;
            (void) b_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                b_alpha = in__.vector_constrain(P_alpha, lp__);
            else
                b_alpha = in__.vector_constrain(P_alpha);
            current_statement_begin__ = 256;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_beta;
            (void) b_beta;  // dummy to suppress unused var warning
            if (jacobian__)
                b_beta = in__.vector_constrain(P_beta, lp__);
            else
                b_beta = in__.vector_constrain(P_beta);
            current_statement_begin__ = 257;
            local_scalar_t__ sigma_obs;
            (void) sigma_obs;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_obs = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_obs = in__.scalar_lb_constrain(0);
            // model body
            {
            current_statement_begin__ = 261;
            validate_non_negative_index("alpha", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha(J);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 262;
            validate_non_negative_index("beta", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta(J);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 263;
            validate_non_negative_index("mu", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(N);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 266;
            lp_accum__.add(normal_log<propto__>(sigma_obs, 0, 2));
            current_statement_begin__ = 267;
            lp_accum__.add(normal_log<propto__>(b_alpha, 0, 2));
            current_statement_begin__ = 268;
            lp_accum__.add(normal_log<propto__>(b_beta, 0, 2));
            current_statement_begin__ = 271;
            stan::math::assign(alpha, param(b_alpha, X_alpha, P_alpha, J, pstream__));
            current_statement_begin__ = 272;
            stan::math::assign(beta, param(b_beta, X_beta, P_beta, J, pstream__));
            current_statement_begin__ = 273;
            stan::math::assign(mu, weibull(N, m0, time, beta, alpha, sp, sigma_obs, pstream__));
            current_statement_begin__ = 274;
            lp_accum__.add(normal_log<propto__>(mT, mu, sigma_obs));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("b_alpha");
        names__.push_back("b_beta");
        names__.push_back("sigma_obs");
        names__.push_back("mT_fit");
        names__.push_back("alpha_fit");
        names__.push_back("beta_fit");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(P_alpha);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P_beta);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_w_noCV_noRE_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_alpha = in__.vector_constrain(P_alpha);
        size_t b_alpha_j_1_max__ = P_alpha;
        for (size_t j_1__ = 0; j_1__ < b_alpha_j_1_max__; ++j_1__) {
            vars__.push_back(b_alpha(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_beta = in__.vector_constrain(P_beta);
        size_t b_beta_j_1_max__ = P_beta;
        for (size_t j_1__ = 0; j_1__ < b_beta_j_1_max__; ++j_1__) {
            vars__.push_back(b_beta(j_1__));
        }
        double sigma_obs = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_obs);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 279;
            validate_non_negative_index("mT_fit", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mT_fit(N);
            stan::math::initialize(mT_fit, DUMMY_VAR__);
            stan::math::fill(mT_fit, DUMMY_VAR__);
            current_statement_begin__ = 280;
            validate_non_negative_index("alpha_fit", "J", J);
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_fit(J);
            stan::math::initialize(alpha_fit, DUMMY_VAR__);
            stan::math::fill(alpha_fit, DUMMY_VAR__);
            current_statement_begin__ = 281;
            validate_non_negative_index("beta_fit", "J", J);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta_fit(J);
            stan::math::initialize(beta_fit, DUMMY_VAR__);
            stan::math::fill(beta_fit, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 283;
            stan::math::assign(alpha_fit, param(b_alpha, X_alpha, P_alpha, J, pstream__));
            current_statement_begin__ = 284;
            stan::math::assign(beta_fit, param(b_beta, X_beta, P_beta, J, pstream__));
            current_statement_begin__ = 285;
            stan::math::assign(mT_fit, weibull_fit_rng(N, m0, time, beta_fit, alpha_fit, sp, sigma_obs, base_rng__, pstream__));
            // validate, write generated quantities
            current_statement_begin__ = 279;
            size_t mT_fit_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mT_fit_j_1_max__; ++j_1__) {
                vars__.push_back(mT_fit(j_1__));
            }
            current_statement_begin__ = 280;
            size_t alpha_fit_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < alpha_fit_j_1_max__; ++j_1__) {
                vars__.push_back(alpha_fit(j_1__));
            }
            current_statement_begin__ = 281;
            size_t beta_fit_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < beta_fit_j_1_max__; ++j_1__) {
                vars__.push_back(beta_fit(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_w_noCV_noRE";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t b_alpha_j_1_max__ = P_alpha;
        for (size_t j_1__ = 0; j_1__ < b_alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_beta_j_1_max__ = P_beta;
        for (size_t j_1__ = 0; j_1__ < b_beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t mT_fit_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < mT_fit_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mT_fit" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_fit_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < alpha_fit_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_fit" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_fit_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < beta_fit_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_fit" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t b_alpha_j_1_max__ = P_alpha;
        for (size_t j_1__ = 0; j_1__ < b_alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_beta_j_1_max__ = P_beta;
        for (size_t j_1__ = 0; j_1__ < b_beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t mT_fit_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < mT_fit_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mT_fit" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_fit_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < alpha_fit_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_fit" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_fit_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < beta_fit_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_fit" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_w_noCV_noRE_namespace::model_w_noCV_noRE stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
