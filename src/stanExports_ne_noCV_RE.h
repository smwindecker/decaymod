// Generated by rstantools.  Do not edit by hand.

/*
    decaymod is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    decaymod is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with decaymod.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_ne_noCV_RE_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_ne_noCV_RE");
    reader.add_event(1, 1, "include", "/functions/neg_exp_functions.stan");
    reader.add_event(1, 0, "start", "/functions/neg_exp_functions.stan");
    reader.add_event(89, 88, "end", "/functions/neg_exp_functions.stan");
    reader.add_event(89, 2, "restart", "model_ne_noCV_RE");
    reader.add_event(89, 2, "include", "/functions/param_functions.stan");
    reader.add_event(89, 0, "start", "/functions/param_functions.stan");
    reader.add_event(168, 79, "end", "/functions/param_functions.stan");
    reader.add_event(168, 3, "restart", "model_ne_noCV_RE");
    reader.add_event(218, 51, "end", "model_ne_noCV_RE");
    return reader;
}
template <typename T1__, typename T2__, typename T3__, typename T5__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T5__>::type, Eigen::Dynamic, 1>
negexp_fit_rng(const int& N,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0,
                   const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time,
                   const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& k_fit,
                   const std::vector<int>& sp,
                   const T5__& sigma_obs, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T5__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 15;
        validate_non_negative_index("mT_fit", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mT_fit(N);
        stan::math::initialize(mT_fit, DUMMY_VAR__);
        stan::math::fill(mT_fit, DUMMY_VAR__);
        current_statement_begin__ = 17;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 18;
            stan::model::assign(mT_fit, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        normal_rng((get_base1(m0, i, "m0", 1) - (get_base1(k_fit, get_base1(sp, i, "sp", 1), "k_fit", 1) * get_base1(time, i, "time", 1))), sigma_obs, base_rng__), 
                        "assigning variable mT_fit");
        }
        current_statement_begin__ = 21;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mT_fit);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct negexp_fit_rng_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T5__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T5__>::type, Eigen::Dynamic, 1>
    operator()(const int& N,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0,
                   const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time,
                   const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& k_fit,
                   const std::vector<int>& sp,
                   const T5__& sigma_obs, RNG& base_rng__, std::ostream* pstream__) const {
        return negexp_fit_rng(N, m0, time, k_fit, sp, sigma_obs, base_rng__, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__>::type, Eigen::Dynamic, 1>
negexp_sim_rng(const int& N_sim,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0_sim,
                   const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time_sim,
                   const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& k_fit,
                   const std::vector<int>& sp_sim, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 36;
        validate_non_negative_index("mT_sim", "N_sim", N_sim);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mT_sim(N_sim);
        stan::math::initialize(mT_sim, DUMMY_VAR__);
        stan::math::fill(mT_sim, DUMMY_VAR__);
        current_statement_begin__ = 38;
        for (int i = 1; i <= N_sim; ++i) {
            current_statement_begin__ = 39;
            stan::model::assign(mT_sim, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (get_base1(m0_sim, i, "m0_sim", 1) - (get_base1(k_fit, get_base1(sp_sim, i, "sp_sim", 1), "k_fit", 1) * get_base1(time_sim, i, "time_sim", 1))), 
                        "assigning variable mT_sim");
        }
        current_statement_begin__ = 42;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mT_sim);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct negexp_sim_rng_functor__ {
    template <typename T1__, typename T2__, typename T3__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__>::type, Eigen::Dynamic, 1>
    operator()(const int& N_sim,
                   const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0_sim,
                   const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time_sim,
                   const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& k_fit,
                   const std::vector<int>& sp_sim, RNG& base_rng__, std::ostream* pstream__) const {
        return negexp_sim_rng(N_sim, m0_sim, time_sim, k_fit, sp_sim, base_rng__, pstream__);
    }
};
template <typename T1__, typename T2__, typename T3__, typename T4__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, 1>
negexp_pred_rng(const int& N_test,
                    const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0_test,
                    const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time_test,
                    const T3__& k_pred,
                    const T4__& sigma_obs, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 57;
        validate_non_negative_index("mT_pred", "N_test", N_test);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mT_pred(N_test);
        stan::math::initialize(mT_pred, DUMMY_VAR__);
        stan::math::fill(mT_pred, DUMMY_VAR__);
        current_statement_begin__ = 59;
        for (int i = 1; i <= N_test; ++i) {
            current_statement_begin__ = 60;
            stan::model::assign(mT_pred, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        normal_rng((get_base1(m0_test, i, "m0_test", 1) - (k_pred * get_base1(time_test, i, "time_test", 1))), sigma_obs, base_rng__), 
                        "assigning variable mT_pred");
        }
        current_statement_begin__ = 63;
        return stan::math::promote_scalar<fun_return_scalar_t__>(mT_pred);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct negexp_pred_rng_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__>::type, Eigen::Dynamic, 1>
    operator()(const int& N_test,
                    const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0_test,
                    const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time_test,
                    const T3__& k_pred,
                    const T4__& sigma_obs, RNG& base_rng__, std::ostream* pstream__) const {
        return negexp_pred_rng(N_test, m0_test, time_test, k_pred, sigma_obs, base_rng__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
negexp_negloglik(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& mT_test,
                     const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0_test,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time_test,
                     const T3__& k_pred,
                     const T4__& sigma_obs,
                     const int& N_test, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 79;
        validate_non_negative_index("loglik", "N_test", N_test);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> loglik(N_test);
        stan::math::initialize(loglik, DUMMY_VAR__);
        stan::math::fill(loglik, DUMMY_VAR__);
        current_statement_begin__ = 80;
        local_scalar_t__ neg_loglik(DUMMY_VAR__);
        (void) neg_loglik;  // dummy to suppress unused var warning
        stan::math::initialize(neg_loglik, DUMMY_VAR__);
        stan::math::fill(neg_loglik, DUMMY_VAR__);
        current_statement_begin__ = 82;
        for (int i = 1; i <= N_test; ++i) {
            current_statement_begin__ = 83;
            stan::model::assign(loglik, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        normal_log(get_base1(mT_test, i, "mT_test", 1), (get_base1(m0_test, i, "m0_test", 1) - (k_pred * get_base1(time_test, i, "time_test", 1))), sigma_obs), 
                        "assigning variable loglik");
        }
        current_statement_begin__ = 86;
        stan::math::assign(neg_loglik, (-(1) * sum(loglik)));
        current_statement_begin__ = 87;
        return stan::math::promote_scalar<fun_return_scalar_t__>(neg_loglik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct negexp_negloglik_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& mT_test,
                     const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& m0_test,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& time_test,
                     const T3__& k_pred,
                     const T4__& sigma_obs,
                     const int& N_test, std::ostream* pstream__) const {
        return negexp_negloglik(mT_test, m0_test, time_test, k_pred, sigma_obs, N_test, pstream__);
    }
};
template <typename T0__, typename T1__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T4__>::type, Eigen::Dynamic, 1>
param_re(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& b,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& X,
             const int& P,
             const int& J,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 102;
        validate_non_negative_index("param_ln", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> param_ln(J);
        stan::math::initialize(param_ln, DUMMY_VAR__);
        stan::math::fill(param_ln, DUMMY_VAR__);
        current_statement_begin__ = 103;
        validate_non_negative_index("param_vector", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> param_vector(J);
        stan::math::initialize(param_vector, DUMMY_VAR__);
        stan::math::fill(param_vector, DUMMY_VAR__);
        current_statement_begin__ = 105;
        for (int j = 1; j <= J; ++j) {
            current_statement_begin__ = 107;
            stan::model::assign(param_ln, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        get_base1(a, j, "a", 1), 
                        "assigning variable param_ln");
            current_statement_begin__ = 109;
            for (int p = 1; p <= P; ++p) {
                current_statement_begin__ = 110;
                stan::model::assign(param_ln, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(param_ln, j, "param_ln", 1) + (get_base1(b, p, "b", 1) * get_base1(X, j, p, "X", 1))), 
                            "assigning variable param_ln");
            }
            current_statement_begin__ = 113;
            stan::model::assign(param_vector, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        stan::math::exp(get_base1(param_ln, j, "param_ln", 1)), 
                        "assigning variable param_vector");
        }
        current_statement_begin__ = 116;
        return stan::math::promote_scalar<fun_return_scalar_t__>(param_vector);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct param_re_functor__ {
    template <typename T0__, typename T1__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T4__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& b,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& X,
             const int& P,
             const int& J,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& a, std::ostream* pstream__) const {
        return param_re(b, X, P, J, a, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
param(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& b,
          const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& X,
          const int& P,
          const int& J, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 130;
        validate_non_negative_index("param_ln", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> param_ln(J);
        stan::math::initialize(param_ln, DUMMY_VAR__);
        stan::math::fill(param_ln, DUMMY_VAR__);
        current_statement_begin__ = 131;
        validate_non_negative_index("param_vector", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> param_vector(J);
        stan::math::initialize(param_vector, DUMMY_VAR__);
        stan::math::fill(param_vector, DUMMY_VAR__);
        current_statement_begin__ = 133;
        for (int j = 1; j <= J; ++j) {
            current_statement_begin__ = 135;
            stan::model::assign(param_ln, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable param_ln");
            current_statement_begin__ = 137;
            for (int p = 1; p <= P; ++p) {
                current_statement_begin__ = 138;
                stan::model::assign(param_ln, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (get_base1(param_ln, j, "param_ln", 1) + (get_base1(b, p, "b", 1) * get_base1(X, j, p, "X", 1))), 
                            "assigning variable param_ln");
            }
            current_statement_begin__ = 141;
            stan::model::assign(param_vector, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        stan::math::exp(get_base1(param_ln, j, "param_ln", 1)), 
                        "assigning variable param_vector");
        }
        current_statement_begin__ = 144;
        return stan::math::promote_scalar<fun_return_scalar_t__>(param_vector);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct param_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& b,
          const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& X,
          const int& P,
          const int& J, std::ostream* pstream__) const {
        return param(b, X, P, J, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
param_pred(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& b,
               const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& X,
               const int& P, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 157;
        local_scalar_t__ param_ln(DUMMY_VAR__);
        (void) param_ln;  // dummy to suppress unused var warning
        stan::math::initialize(param_ln, DUMMY_VAR__);
        stan::math::fill(param_ln, DUMMY_VAR__);
        current_statement_begin__ = 158;
        local_scalar_t__ param_value(DUMMY_VAR__);
        (void) param_value;  // dummy to suppress unused var warning
        stan::math::initialize(param_value, DUMMY_VAR__);
        stan::math::fill(param_value, DUMMY_VAR__);
        current_statement_begin__ = 160;
        stan::math::assign(param_ln, 0);
        current_statement_begin__ = 162;
        for (int p = 1; p <= P; ++p) {
            current_statement_begin__ = 163;
            stan::math::assign(param_ln, (param_ln + (get_base1(b, p, "b", 1) * get_base1(X, 1, p, "X", 1))));
        }
        current_statement_begin__ = 166;
        stan::math::assign(param_value, stan::math::exp(param_ln));
        current_statement_begin__ = 167;
        return stan::math::promote_scalar<fun_return_scalar_t__>(param_value);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct param_pred_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& b,
               const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& X,
               const int& P, std::ostream* pstream__) const {
        return param_pred(b, X, P, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_ne_noCV_RE
  : public stan::model::model_base_crtp<model_ne_noCV_RE> {
private:
        int N;
        vector_d mT;
        vector_d m0;
        vector_d time;
        int P;
        int J;
        matrix_d X;
        std::vector<int> sp;
        int N_sim;
        vector_d m0_sim;
        vector_d time_sim;
        std::vector<int> sp_sim;
public:
    model_ne_noCV_RE(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_ne_noCV_RE(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_ne_noCV_RE_namespace::model_ne_noCV_RE";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 172;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 173;
            validate_non_negative_index("mT", "N", N);
            context__.validate_dims("data initialization", "mT", "vector_d", context__.to_vec(N));
            mT = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("mT");
            pos__ = 0;
            size_t mT_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mT_j_1_max__; ++j_1__) {
                mT(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 174;
            validate_non_negative_index("m0", "N", N);
            context__.validate_dims("data initialization", "m0", "vector_d", context__.to_vec(N));
            m0 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("m0");
            pos__ = 0;
            size_t m0_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < m0_j_1_max__; ++j_1__) {
                m0(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 175;
            validate_non_negative_index("time", "N", N);
            context__.validate_dims("data initialization", "time", "vector_d", context__.to_vec(N));
            time = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < time_j_1_max__; ++j_1__) {
                time(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "time", time, 0);
            current_statement_begin__ = 176;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            check_greater_or_equal(function__, "P", P, 1);
            current_statement_begin__ = 177;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            check_greater_or_equal(function__, "J", J, 1);
            current_statement_begin__ = 178;
            validate_non_negative_index("X", "J", J);
            validate_non_negative_index("X", "P", P);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(J,P));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(J, P);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = P;
            size_t X_j_1_max__ = J;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 179;
            validate_non_negative_index("sp", "N", N);
            context__.validate_dims("data initialization", "sp", "int", context__.to_vec(N));
            sp = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("sp");
            pos__ = 0;
            size_t sp_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < sp_k_0_max__; ++k_0__) {
                sp[k_0__] = vals_i__[pos__++];
            }
            size_t sp_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < sp_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sp[i_0__]", sp[i_0__], 1);
                check_less_or_equal(function__, "sp[i_0__]", sp[i_0__], J);
            }
            current_statement_begin__ = 181;
            context__.validate_dims("data initialization", "N_sim", "int", context__.to_vec());
            N_sim = int(0);
            vals_i__ = context__.vals_i("N_sim");
            pos__ = 0;
            N_sim = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_sim", N_sim, 1);
            current_statement_begin__ = 182;
            validate_non_negative_index("m0_sim", "N_sim", N_sim);
            context__.validate_dims("data initialization", "m0_sim", "vector_d", context__.to_vec(N_sim));
            m0_sim = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_sim);
            vals_r__ = context__.vals_r("m0_sim");
            pos__ = 0;
            size_t m0_sim_j_1_max__ = N_sim;
            for (size_t j_1__ = 0; j_1__ < m0_sim_j_1_max__; ++j_1__) {
                m0_sim(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 183;
            validate_non_negative_index("time_sim", "N_sim", N_sim);
            context__.validate_dims("data initialization", "time_sim", "vector_d", context__.to_vec(N_sim));
            time_sim = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_sim);
            vals_r__ = context__.vals_r("time_sim");
            pos__ = 0;
            size_t time_sim_j_1_max__ = N_sim;
            for (size_t j_1__ = 0; j_1__ < time_sim_j_1_max__; ++j_1__) {
                time_sim(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "time_sim", time_sim, 0);
            current_statement_begin__ = 184;
            validate_non_negative_index("sp_sim", "N_sim", N_sim);
            context__.validate_dims("data initialization", "sp_sim", "int", context__.to_vec(N_sim));
            sp_sim = std::vector<int>(N_sim, int(0));
            vals_i__ = context__.vals_i("sp_sim");
            pos__ = 0;
            size_t sp_sim_k_0_max__ = N_sim;
            for (size_t k_0__ = 0; k_0__ < sp_sim_k_0_max__; ++k_0__) {
                sp_sim[k_0__] = vals_i__[pos__++];
            }
            size_t sp_sim_i_0_max__ = N_sim;
            for (size_t i_0__ = 0; i_0__ < sp_sim_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sp_sim[i_0__]", sp_sim[i_0__], 1);
                check_less_or_equal(function__, "sp_sim[i_0__]", sp_sim[i_0__], J);
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 188;
            validate_non_negative_index("b", "P", P);
            num_params_r__ += P;
            current_statement_begin__ = 189;
            validate_non_negative_index("a", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 190;
            num_params_r__ += 1;
            current_statement_begin__ = 191;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_ne_noCV_RE() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 188;
        if (!(context__.contains_r("b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        validate_non_negative_index("b", "P", P);
        context__.validate_dims("parameter initialization", "b", "vector_d", context__.to_vec(P));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b(P);
        size_t b_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
            b(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 189;
        if (!(context__.contains_r("a")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a");
        pos__ = 0U;
        validate_non_negative_index("a", "J", J);
        context__.validate_dims("parameter initialization", "a", "vector_d", context__.to_vec(J));
        Eigen::Matrix<double, Eigen::Dynamic, 1> a(J);
        size_t a_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
            a(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(a);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 190;
        if (!(context__.contains_r("sigma_obs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_obs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_obs", "double", context__.to_vec());
        double sigma_obs(0);
        sigma_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_obs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 191;
        if (!(context__.contains_r("sigma_sp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_sp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_sp");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_sp", "double", context__.to_vec());
        double sigma_sp(0);
        sigma_sp = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_sp);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_sp: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 188;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b;
            (void) b;  // dummy to suppress unused var warning
            if (jacobian__)
                b = in__.vector_constrain(P, lp__);
            else
                b = in__.vector_constrain(P);
            current_statement_begin__ = 189;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> a;
            (void) a;  // dummy to suppress unused var warning
            if (jacobian__)
                a = in__.vector_constrain(J, lp__);
            else
                a = in__.vector_constrain(J);
            current_statement_begin__ = 190;
            local_scalar_t__ sigma_obs;
            (void) sigma_obs;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_obs = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_obs = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 191;
            local_scalar_t__ sigma_sp;
            (void) sigma_sp;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_sp = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_sp = in__.scalar_lb_constrain(0);
            // model body
            {
            current_statement_begin__ = 195;
            validate_non_negative_index("k", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> k(J);
            stan::math::initialize(k, DUMMY_VAR__);
            stan::math::fill(k, DUMMY_VAR__);
            current_statement_begin__ = 198;
            lp_accum__.add(normal_log<propto__>(a, 0, sigma_sp));
            current_statement_begin__ = 199;
            lp_accum__.add(normal_log<propto__>(sigma_sp, 0, 2));
            current_statement_begin__ = 200;
            lp_accum__.add(normal_log<propto__>(sigma_obs, 0, 2));
            current_statement_begin__ = 201;
            lp_accum__.add(normal_log<propto__>(b, 0, 2));
            current_statement_begin__ = 204;
            stan::math::assign(k, param_re(b, X, P, J, a, pstream__));
            current_statement_begin__ = 205;
            lp_accum__.add(normal_log<propto__>(mT, subtract(m0, elt_multiply(stan::model::rvalue(k, stan::model::cons_list(stan::model::index_multi(sp), stan::model::nil_index_list()), "k"), time)), sigma_obs));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("b");
        names__.push_back("a");
        names__.push_back("sigma_obs");
        names__.push_back("sigma_sp");
        names__.push_back("mT_sim");
        names__.push_back("k_fit");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_sim);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_ne_noCV_RE_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> b = in__.vector_constrain(P);
        size_t b_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
            vars__.push_back(b(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> a = in__.vector_constrain(J);
        size_t a_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
            vars__.push_back(a(j_1__));
        }
        double sigma_obs = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_obs);
        double sigma_sp = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_sp);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 210;
            validate_non_negative_index("mT_sim", "N_sim", N_sim);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mT_sim(N_sim);
            stan::math::initialize(mT_sim, DUMMY_VAR__);
            stan::math::fill(mT_sim, DUMMY_VAR__);
            current_statement_begin__ = 211;
            validate_non_negative_index("k_fit", "J", J);
            Eigen::Matrix<double, Eigen::Dynamic, 1> k_fit(J);
            stan::math::initialize(k_fit, DUMMY_VAR__);
            stan::math::fill(k_fit, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 213;
            stan::math::assign(k_fit, param_re(b, X, P, J, a, pstream__));
            current_statement_begin__ = 214;
            stan::math::assign(mT_sim, negexp_sim_rng(N_sim, m0_sim, time_sim, k_fit, sp_sim, base_rng__, pstream__));
            // validate, write generated quantities
            current_statement_begin__ = 210;
            size_t mT_sim_j_1_max__ = N_sim;
            for (size_t j_1__ = 0; j_1__ < mT_sim_j_1_max__; ++j_1__) {
                vars__.push_back(mT_sim(j_1__));
            }
            current_statement_begin__ = 211;
            size_t k_fit_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < k_fit_j_1_max__; ++j_1__) {
                vars__.push_back(k_fit(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_ne_noCV_RE";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t b_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_sp";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t mT_sim_j_1_max__ = N_sim;
        for (size_t j_1__ = 0; j_1__ < mT_sim_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mT_sim" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t k_fit_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < k_fit_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "k_fit" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t b_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t a_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_sp";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t mT_sim_j_1_max__ = N_sim;
        for (size_t j_1__ = 0; j_1__ < mT_sim_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mT_sim" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t k_fit_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < k_fit_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "k_fit" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_ne_noCV_RE_namespace::model_ne_noCV_RE stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
